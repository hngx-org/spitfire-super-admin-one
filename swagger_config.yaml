swagger: "2.0"
info:
  title: Super Admin1
  version: "1.0"
basePath: "/api/user"
schemes:
  - http
  - https
paths:
  /users:
    get:
      tags:
        - User
      summary: Get a list of users
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      tags:
        - User
      summary: Create a new user
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created successfully
          schema:
            $ref: '#/definitions/User'

  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'
    put:
      tags:
        - User
      summary: Update a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
          format: int64
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated successfully
          schema:
            $ref: '#/definitions/User'
    delete:
      tags:
        - User
      summary: Delete a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: User deleted successfully

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      username:
        type: string
        example: john_doe
      first_name:
        type: string
        example: John
      last_name:
        type: string
        example: Doe
      email:
        type: string
        example: john@example.com
      section_order:
        type: array
        items:
          type: string
        example: ['section1', 'section2']
      password:
        type: string
        example: myapp
      is_verified:
        type: boolean
        example: true
      two_factor_auth:
        type: boolean
        example: false
      provider:
        type: string
        example: local
      profile_pic:
        type: string
        example: https://example.com/profile_pic.jpg
      refresh_token:
        type: string
        example: ABCDEFG


basePath: "/api/shop"
schemes:
  - "https"

paths:
  /shop:
    get:
      tags:
        - "Shops"
      summary: "Get a list of shops"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Shop"
    post:
      tags:
        - "Shops"
      summary: "Create a new shop"
      parameters:
        - name: "shop"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Shop"
      responses:
        201:
          description: "Shop created successfully"
        400:
          description: "Bad request"

  /{id}:
    get:
      tags:
        - "Shops"
      summary: "Get details of a shop by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Shop"
        404:
          description: "Shop not found"

    put:
      tags:
        - "Shops"
      summary: "Update a shop by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
        - name: "shop"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Shop"
      responses:
        200:
          description: "Shop updated successfully"
        404:
          description: "Shop not found"
        400:
          description: "Bad request"

    delete:
      tags:
        - "Shops"
      summary: "Delete a shop by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "integer"
      responses:
        204:
          description: "Shop deleted successfully"
        404:
          description: "Shop not found"

definitions:
  Shop:
    type: "object"
    properties:
      id:
        type: "integer"
      merchant_id:
        type: "string"
      name:
        type: "string"
      policy_confimation:
        type: "boolean"
      restricted:
        type: "string"
        enum:
          - "no"
          - "temporary"
          - "permanent"
      admin_status:
        type: "string"
        enum:
          - "pending"
          - "review"
          - "approved"
          - "blacklist"
      is_deleted:
        type: "string"
        enum:
          - "active"
          - "temporary"
      reviewed:
        type: "boolean"
      rating:
        type: "number"
        format: "double"



  paths:
    /:
      get:
        tags:
          - "Products"
        summary: "Get a list of products"
        responses:
          200:
            description: "Successful response"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Product"
      post:
        tags:
          - "Products"
        summary: "Create a new product"
        parameters:
          - name: "product"
            in: "body"
            required: true
            schema:
              $ref: "#/definitions/Product"
        responses:
          201:
            description: "Product created successfully"
          400:
            description: "Bad request"

    /{id}:
      get:
        tags:
          - "Products"
        summary: "Get details of a product by ID"
        parameters:
          - name: "id"
            in: "path"
            required: true
            type: "integer"
        responses:
          200:
            description: "Successful response"
            schema:
              $ref: "#/definitions/Product"
          404:
            description: "Product not found"

      put:
        tags:
          - "Products"
        summary: "Update a product by ID"
        parameters:
          - name: "id"
            in: "path"
            required: true
            type: "integer"
          - name: "product"
            in: "body"
            required: true
            schema:
              $ref: "#/definitions/Product"
        responses:
          200:
            description: "Product updated successfully"
          404:
            description: "Product not found"
          400:
            description: "Bad request"

      delete:
        tags:
          - "Products"
        summary: "Delete a product by ID"
        parameters:
          - name: "id"
            in: "path"
            required: true
            type: "integer"
        responses:
          204:
            description: "Product deleted successfully"
          404:
            description: "Product not found"

  definitions:
    Product:
      type: "object"
      properties:
        id:
          type: "integer"
        shop_id:
          type: "string"
        rating_id:
          type: "string"
        image_id:
          type: "string"
        category_id:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        quantity:
          type: "integer"
        price:
          type: "number"
          format: "double"
        discount_price:
          type: "number"
          format: "double"
        tax:
          type: "number"
          format: "double"
        admin_status:
          type: "string"
          enum:
            - "pending"
            - "review"
            - "approved"
            - "blacklist"
        is_deleted:
          type: "string"
          enum:
            - "active"
            - "temporary"
        is_published:
          type: "boolean"
        currency:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
        updated_at:
          type: "string"
          format: "date-time"

