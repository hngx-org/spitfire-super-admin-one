swagger: "2.0"
info:
  title: Spitfire Superadmin API
  version: "1.0"

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: Enter Bearer token in the format 'Bearer <token>'

security:
  - BearerAuth: []  # Apply BearerAuth security to all endpoints

basePath: ""

schemes:
  - http
  - https

paths:
  # /api/shop/endpoint:
  #   get:
  #     tags:
  #       - Shop
  #     summary: Get a simple message from the shop endpoint (THIS IS A TEST ENDPOINT)
  #     responses:
  #       200:
  #         description: Successful response
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: string
  #               example: "This is the shop endpoint under /api/shop/endpoint"
  /api/shop/endpoint:
      get:
        tags:
          - Shop
        summary: Get information from the shop endpoint
        description: |
          This endpoint retrieves information from the shop endpoint. The user ID is automatically
          provided by the authorization logic.
        responses:
          200:
            description: Successful response
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "This is the shop endpoint for user ID: <user_id>"
          401:
            description: Unauthorized - Invalid or missing authentication token
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: "Unauthorized"
                message:
                  type: string
                  example: "You are not logged in"
          403:
            description: Forbidden - User does not have permission to access the resource
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: "Forbidden"
                message:
                  type: string
                  example: "No Permissions to access the requested resource"
        security:
          - BearerAuth: []  # Apply BearerAuth security to this endpoint

  /api/shop/totals:
    get:
      tags:
        - Shop
      summary: Get total counts related to shops
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Total related to shops retrieved successfully."
              data:
                type: object
                example: {      
                            "total_banned_shops": 0,
                            "total_deleted_shops": 3,
                            "total_shops": 13
                        } 
                description: Dynamic response structure representing shop totals.
  /api/shop/all/specific:
    get:
      tags:
        - Shop
      summary: Get specific information about all shops
      description: 
        This endpoint is specific to a frontend request. It returns specific information about all shops, including their status and product count.
      responses:
        200:
          description: Successful response containing specific shop information
          schema:
            type: object
            properties:
              message:
                type: string
                example: "All shops request successful"
              data:
                type: array
                items:
                  $ref: '#/definitions/ShopInfo'  # Reference to the ShopInfo definition
        500:
          description: Internal Server Error response
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
                description: The error type.
              message:
                type: string
                example: "An internal server error occurred."
                description: A message providing more details about the error.

  /api/shop/specific/{shop_id}:
    get:
      tags:
        - Shop
      summary: Get specific information about a shop by ID
      description: 
        This endpoint is specific to a frontend request. It returns detailed information about a specific shop, including its status, product count, and products.
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
          description: The unique identifier of the shop.

      responses:
        200:
          description: Successful response containing specific shop information
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Shop request successful"
              data:
                $ref: '#/definitions/ShopDetails'  # Reference to the ShopDetails definition
        404:
          description: Shop not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
                description: The error type.
              message:
                type: string
                example: "Invalid shop ID"
                description: A message providing more details about the error.
        500:
          description: Internal Server Error response
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
                description: The error type.
              message:
                type: string
                example: "An internal server error occurred."
                description: A message providing more details about the error.

  definitions:
    ShopDetails:
      type: object
      properties:
        createdAt:
          type: string
          format: date
          example: "01-01-2023"
          description: The creation date of the shop.
        shop_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
          description: The unique identifier of the shop.
        merchant_id:
          type: string
          example: "M12345"
          description: The merchant ID associated with the shop.
        name:
          type: string
          example: "John Doe"
          description: The name of the merchant associated with the shop.
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: The email address of the merchant associated with the shop.
        status:
          type: string
          example: "Active"
          description: The status of the shop, can be "Active", "Banned", or "Deleted".
        total_products:
          type: integer
          example: 10
          description: The total number of products available in the shop.
        products:
          type: array
          items:
            type: object
            properties:
              currency:
                type: string
                example: "USD"
                description: The

  /api/shop/specific/{shop_id}:
    get:
      tags:
        - Shop
      summary: Get specific information about a shop by ID
      description: 
        This endpoint is specific to a frontend request. It returns detailed information about a specific shop, including its status, product count, and products.
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
          description: The unique identifier of the shop.
      security:
        - BearerAuth: []  # Apply BearerAuth security to this endpoint
      responses:
        200:
          description: Successful response containing specific shop information
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Shop request successful"
              data:
                type: object
                properties:
                  createdAt:
                    type: string
                    example: "12-10-2023"
                    description: The creation date of the shop.
                  shop_id:
                    type: string
                    example: "d7955c27-4d71-4cd6-a6bb-e6402151d51f"
                    description: The unique identifier of the shop.
                  merchant_id:
                    type: string
                    example: "d7955c27-4d61-4cd6-a6bb-e6402151d51f"
                    description: The merchant ID associated with the shop.
                  name:
                    type: string
                    example: "John Doe"
                    description: The name of the merchant associated with the shop.
                  email:
                    type: string
                    example: "sicoj92691@elixirsd.com"
                    description: The email address of the merchant associated with the shop.
                  status:
                    type: string
                    example: "Active"
                    description: The status of the shop, can be "Active", "Banned", or "Deleted".
                  total_products:
                    type: integer
                    example: 3
                    description: The total number of products available in the shop.
        404:
          description: Shop not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
                description: The error type.
              message:
                type: string
                example: "Invalid shop ID"
                description: A message providing more details about the error.
        500:
          description: Internal Server Error response
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
                description: The error type.
              message:
                type: string
                example: "An internal server error occurred."
                description: A message providing more details about the error.

  /api/shop/all:
    get:
      tags:
        - Shop
      summary: Get information related to all shops
      description: 
        This endpoint retrieves information related to all shops.
      security:
        - BearerAuth: []  # Apply BearerAuth security to this endpoint
      responses:
        200:
          description: Successful response containing information about all shops
          schema:
            type: object
            properties:
              message:
                type: string
                example: "All shops request successful"
              data:
                type: array
                items:
                  $ref: '#/definitions/Shop'
        500:
          description: Internal Server Error response
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
                description: The error type.
              message:
                type: string
                example: "An internal server error occurred."
                description: A message providing more details about the error.

#START
  /api/shop/{shop_id}:
    get:
      tags:
        - Shop
      summary: Get information related to a shop
      description: 
        This endpoint retrieves information related to a specific shop using its unique identifier.
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
          description: The unique identifier of the shop/vendor.
      responses:
        200:
          description: Successful response containing information about the shop
          schema:
            $ref: '#/definitions/Shop'
        404:
          description: Shop not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error response
          schema:
            $ref: '#/definitions/Error'

  /api/shop/all/products:
    get:
      tags:
        - Shop
      summary: Get information related to all shops, their products, and total products
      description: 
        This endpoint retrieves information related to all shops, their products, and total products.
      # parameters:
      #   - name: user_id
      #     in: query
      #     required: true
      #     type: string
      #     description: The unique identifier of the user making the request.
      responses:
        200:
          description: Successful response containing information about shops and their products
          schema:
            $ref: '#/definitions/ShopsAndProducts'
        500:
          description: Internal Server Error response
          schema:
            $ref: '#/definitions/Error'

  /api/shop/{shop_id}/products:
    get:
      tags:
        - Shop
      summary: Get information related to a shop, its products, and total products
      description: 
        This endpoint retrieves information related to a specific shop, its products, and total products.
      parameters:
        # - name: user_id
        #   in: query
        #   required: true
        #   type: string
        #   description: The unique identifier of the user making the request.
        - name: shop_id
          in: path
          required: true
          type: string
          description: The unique identifier of the shop/vendor.
      responses:
        200:
          description: Successful response containing information about the shop and its products
          schema:
            $ref: '#/definitions/ShopsAndProducts'
        404:
          description: Shop not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error response
          schema:
            $ref: '#/definitions/Error'
#END
#NEW DEFINITIONS


  /api/shop/ban_vendor/{vendor_id}:
    put:
      tags:
        - Shop
      summary: Ban a vendor/shop by ID
      parameters:
        - name: vendor_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Vendor banned successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Vendor account banned temporarily."
              vendor_details:
                $ref: '#/definitions/Vendor'
        400:
          description: Bad request - Vendor is already banned
        404:
          description: Vendor not found

  /api/shop/banned_vendors:
    get:
      tags:
        - Shop
      summary: Get a list of all temporarily banned vendors
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Banned vendors retrieved successfully."
              banned_vendors:
                type: array
                items:
                  $ref: '#/definitions/Vendor'

  /api/shop/unban_vendor/{vendor_id}:
    put:
      tags:
        - Shop
      summary: Unban a vendor by ID
      parameters:
        - name: vendor_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Vendor unbanned successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: "Success"
              message:
                type: string
                example: "Vendor unbanned successfully."
              vendor_details:
                $ref: '#/definitions/Vendor'
        404:
          description: Vendor not found
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Vendor's shop is not active
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'

  /api/shop/restore_shop/{shop_id}:
    patch:
      tags:
        - Shop
      summary: Restore a temporarily deleted shop by ID
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop restored successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Shop restored successfully"
        404:
          description: Invalid Shop
          schema:
            $ref: '#/definitions/Error'
        400:
          description: Invalid JSON Data
          schema:
            $ref: '#/definitions/Error'

  /api/shop/delete_shop/{shop_id}:
    patch:
      tags:
        - Shop
      summary: Delete a shop temporarily
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop temporarily deleted
        400:
          description: Bad request - Shop already deleted
        404:
          description: Invalid shop or Shop not found
    delete:
      tags:
        - Shop
      summary: Permanently delete a shop
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop deleted aggressively
        404:
          description: Shop not found

  /shop:
    get:
      tags:
        - Shop
      summary: Get all shops (THIS IS A TEST ENDPOINT)
      responses:
        200:
          description: List of all shops
          schema:
            type: array
            items:
              $ref: '#/definitions/Shop'


  /shop/{shop_id}:
    get:
      tags:
        - Shop
      summary: Get a specific shop by ID (THIS IS A TEST ENDPOINT)
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop details retrieved successfully
          schema:
            $ref: '#/definitions/Shop'
        404:
          description: Shop not found

  /api/logs/shops:
    get:
      tags:
        - ShopLogs
      summary: Get all shop logs
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              message:
                type: string
                example: "success"
              logs:
                type: array
                items:
                  $ref: '#/definitions/ShopLog'

  /api/logs/shops/{shop_id}:
    get:
      tags:
        - ShopLogs
      summary: Get shop logs by shop ID
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop logs retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/ShopLogs'

  /api/logs/shops/download:
    get:
      tags:
        - ShopLogs
      summary: Download all shop logs
      responses:
        200:
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/logs/shop/actions:
    get:
      tags:
        - Shop
      summary: Get a list of all shop-related actions from event logs
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/ShopAction'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
  /api/product/delete_product/{id}:
    patch:
      tags:
        - Product
      summary: Temporarily delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: product
          in: body
          required: true
          schema:
            type: object
            properties:
              status:
                type: string
                example: "temporary"
      responses:
        204:
          description: Product temporarily deleted
          schema:
            type: object
            properties:
              message:
                type: string
                example: No content
        404:
          description: Invalid Product
          schema:
            $ref: '#/definitions/Error'

    delete:
      tags:
        - Product
      summary: Permanently delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        204:
          description: Product permanently deleted
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product permanently deleted"
        400:
          description: Bad Request - Invalid ID Data-Type
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Product not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'

  /api/product/restore_product/{product_id}:
    patch:
      tags:
        - Product
      summary: Restore a temporarily deleted product by ID
      parameters:
        - name: product_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Product restored successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Product restored successfully"
        404:
          description: Invalid Product
          schema:
            $ref: '#/definitions/Error'

  /api/product/download/log:
    get:
      tags:
        - Product
      summary: Download product logs
      responses:
        200:
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: 'File to download'
              schema:
                type: string
                example: 'attachment; filename=product_logs.txt'
        204:
          description: No log entry exists
          schema:
            $ref: '#/definitions/Error'
  /api/health/:
    get:
      summary: "Check the availability of specified API endpoints"
      responses:
        200:
          description: "Successful health check"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                endpoint:
                  type: "string"
                status:
                  type: "string"
                  description: "Status of the endpoint (active/inactive)"
        500:
          description: "Internal Server Error"
    parameters: []
  /api/health/last_check:
    get:
      summary: "Retrieve the last health check log entry"
      responses:
        200:
          description: "Successful retrieval of the last health check log entry"
          schema:
            type: "object"
            properties:
              timestamp:
                type: "string"
                description: "Timestamp of the last health check"
              results:
                type: "array"
                items:
                  type: "object"
                  properties:
                    endpoint:
                      type: "string"
                      description: "Endpoint name"
                    status:
                      type: "string"
                      description: "Status of the endpoint (active/inactive)"
        404:
          description: "No health check logs available"
        500:
          description: "Internal Server Error"
    parameters: []


  /api/test/user/create:
    post:
      tags:
        - Test
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserInput'
      responses:
        201:
          description: User created successfully
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request - Invalid input data

  /api/test/user:
    get:
      tags:
        - Test
      summary: Get all users
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /api/test/user/<user_id>:
    get:
      tags:
        - Test
      summary: Get a specific user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

  /api/test/user/<user_id>:
    delete:
      tags:
        - Test
      summary: Delete a user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found

  /api/test/user/<user_id>/shop:
    post:
      tags:
        - Test
      summary: Create a new shop for a user
      parameters:
        - name: user_id
          in: path
          required: true
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/ShopInput'
      responses:
        201:
          description: Shop created successfully
          schema:
            $ref: '#/definitions/Shop'
        400:
          description: Bad request - Invalid input data
  /api/test:
    get:
      tags:
        - Test
      summary: Get all shops
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Shop'
  /api/test/<shop_id>:
    get:
      tags:
        - Test
      summary: Get a specific shop by ID
      parameters:
        - name: shop_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Shop details retrieved successfully
          schema:
            $ref: '#/definitions/Shop'
        404:
          description: Shop not found

definitions:
  ShopInput:
    type: object
    properties:
      name:
        type: string
      policy_confirmation:
        type: boolean
      reviewed:
        type: boolean
      rating:
        type: number

definitions:
  UserInput:
    type: object
    properties:
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      section_order:
        type: integer
      password:
        type: string
      is_verified:
        type: boolean
      two_factor_auth:
        type: boolean
      provider:
        type: string
      profile_pic:
        type: string
      refresh_token:
        type: string

  User:
    type: object
    properties:
      id:
        type: string
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      section_order:
        type: integer
      is_verified:
        type: boolean
      two_factor_auth:
        type: boolean
      provider:
        type: string
      profile_pic:
        type: string
      refresh_token:
        type: string
  Shop:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for the shop/vendor
      merchant_id:
        type: string
        description: Unique identifier of the merchant associated with the shop/vendor
      name:
        type: string
        description: The name of the shop/vendor
      policy_confirmation:
        type: boolean
        description: Indicates whether the policy is confirmed for the shop/vendor
      restricted:
        type: string
        enum: ['no', 'temporary', 'permanent']
        description: Indicates the restriction status of the shop/vendor
      admin_status:
        type: string
        enum: ['pending', 'review', 'approved', 'blacklist', 'suspended']
        description: Status of the shop/vendor from the admin perspective
      is_deleted:
        type: string
        enum: ['active', 'temporary']
        description: Status indicating whether the shop/vendor is active or temporarily deleted
      reviewed:
        type: boolean
        description: Indicates whether the shop/vendor has been reviewed
      rating:
        type: number
        format: float
        description: Rating of the shop/vendor
      created_at:
        type: string
        format: date-time
        description: Date and time when the shop/vendor was created
      updated_at:
        type: string
        format: date-time
        description: Date and time when the shop/vendor was last updated
    example:
      id: "550e8400-e29b-41d4-a716-446655440001"
      merchant_id: "550e8400-e29b-41d4-a716-446655440002"
      name: "Sample Shop"
      policy_confirmation: true
      restricted: "no"
      admin_status: "pending"
      is_deleted: "active"
      reviewed: false
      rating: 0.0
      created_at: "2023-10-08T12:00:00Z"
      updated_at: "2023-10-08T14:30:00Z"
  ShopInput:
    type: object
    properties:
      name:
        type: string
      policy_confirmation:
        type: boolean
      reviewed:
        type: boolean
      rating:
        type: number
  Product:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Unique identifier for the product
      name:
        type: string
        description: The name of the product
      description:
        type: string
        description: Description of the product
      quantity:
        type: integer
        description: Quantity of the product available
      price:
        type: number
        format: float
        description: Regular price of the product
      discount_price:
        type: number
        format: float
        description: Discounted price of the product
      tax:
        type: number
        format: float
        description: Tax applied to the product
      admin_status:
        type: string
        enum: ['pending', 'review', 'approved', 'blacklist', 'suspended']
        description: Status of the product from the admin perspective
      is_deleted:
        type: string
        enum: ['active', 'temporary']
        description: Status indicating whether the product is active or temporarily deleted
      is_published:
        type: boolean
        description: Indicates whether the product is published or not
      currency:
        type: string
        description: Currency used for the product price
      created_at:
        type: string
        format: date-time
        description: Date and time when the product was created
      updated_at:
        type: string
        format: date-time
        description: Date and time when the product was last updated
    example:
      id: 1
      name: "Sample Product"
      description: "This is a sample product description."
      quantity: 100
      price: 29.99
      discount_price: 24.99
      tax: 5.00
      admin_status: "approved"
      is_deleted: "active"
      is_published: true
      currency: "USD"
      created_at: "2023-10-08T12:00:00Z"
      updated_at: "2023-10-08T14:30:00Z"

  ShopAction:
    type: object
    properties:
      id:
        type: string
      shop_id:
        type: string
      action_type:
        type: string
      timestamp:
        type: string
        format: date-time

  Error:
    type: object
    properties:
      error:
        type: string
      message:
        type: string



definitions:
  Shop:
    type: object
    properties:
      admin_status:
        type: string
        description: Admin status of the shop.
      createdAt:
        type: string
        format: date
        description: Creation date of the shop.
      id:
        type: string
        description: Unique identifier of the shop.
      is_deleted:
        type: string
        description: Deletion status of the shop.
      merchant_id:
        type: string
        description: Merchant ID associated with the shop.
      shop_name:
        type: string
        description: Name of the shop.
      policy_confirmation:
        type: string
        description: Policy confirmation status of the shop.
      rating:
        type: number
        description: Rating of the shop.
      restricted:
        type: string
        description: Restriction status of the shop.
      reviewed:
        type: boolean
        description: Review status of the shop.
      updatedAt:
        type: string
        format: date
        description: Last update date of the shop.

  Product:
    type: object
    properties:
      admin_status:
        type: string
        description: Admin status of the product.
      category_id:
        type: string
        description: Unique identifier of the product category.
      createdAt:
        type: string
        format: date
        description: Creation date of the product.
      currency:
        type: string
        description: Currency of the product price.
      description:
        type: string
        description: Description of the product.
      discount_price:
        type: number
        description: Discounted price of the product.
      product_id:
        type: string
        description: Unique identifier of the product.
      image_id:
        type: string
        description: Unique identifier of the product image.
      rating_id:
        type: string
        description: Unique identifier of the product rating.
      is_deleted:
        type: string
        description: Deletion status of the product.
      is_published:
        type: boolean
        description: Publish status of the product.
      name:
        type: string
        description: Name of the product.
      price:
        type: number
        description: Price of the product.
      quantity:
        type: integer
        description: Quantity of the product.
      tax:
        type: number
        description: Tax amount of the product.
      updatedAt:
        type: string
        format: date
        description: Last update date of the product.

  ShopsAndProducts:
    type: object
    properties:
      shops:
        type: array
        items:
          $ref: '#/definitions/Shop'
        description: List of shops.
      products:
        type: array
        items:
          $ref: '#/definitions/Product'
        description: List of products.
      
  Error:
    type: object
    properties:
      error:
        type: string
        description: Type of the error.
      message:
        type: string
        description: Detailed error message.



  Vendor:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for the shop/vendor
      merchant_id:
        type: string
        description: Unique identifier of the merchant associated with the shop/vendor
      name:
        type: string
        description: The name of the shop/vendor
      policy_confirmation:
        type: boolean
        description: Indicates whether the policy is confirmed for the shop/vendor
      restricted:
        type: string
        enum: ['no', 'temporary', 'permanent']
        description: Indicates the restriction status of the shop/vendor
      admin_status:
        type: string
        enum: ['pending', 'review', 'approved', 'blacklist', 'suspended']
        description: Status of the shop/vendor from the admin perspective
      is_deleted:
        type: string
        enum: ['active', 'temporary']
        description: Status indicating whether the shop/vendor is active or temporarily deleted
      reviewed:
        type: boolean
        description: Indicates whether the shop/vendor has been reviewed
      rating:
        type: number
        format: float
        description: Rating of the shop/vendor
      created_at:
        type: string
        format: date-time
        description: Date and time when the shop/vendor was created
      updated_at:
        type: string
        format: date-time
        description: Date and time when the shop/vendor was last updated



# swagger: "2.0"
# info:
#   title: Super Admin1
#   version: "1.0"
# basePath: "/api/user"
# schemes:
#   - http
#   - https
# paths:
#   /users:
#     get:
#       tags:
#         - User
#       summary: Get a list of users
#       responses:
#         200:
#           description: Successful response
#           schema:
#             type: array
#             items:
#               $ref: '#/definitions/User'
#     post:
#       tags:
#         - User
#       summary: Create a new user
#       parameters:
#         - name: user
#           in: body
#           required: true
#           schema:
#             $ref: '#/definitions/User'
#       responses:
#         201:
#           description: User created successfully
#           schema:
#             $ref: '#/definitions/User'

#   /users/{user_id}:
#     get:
#       tags:
#         - User
#       summary: Get a user by ID
#       parameters:
#         - name: user_id
#           in: path
#           required: true
#           type: integer
#           format: int64
#       responses:
#         200:
#           description: Successful response
#           schema:
#             $ref: '#/definitions/User'
#     put:
#       tags:
#         - User
#       summary: Update a user by ID
#       parameters:
#         - name: user_id
#           in: path
#           required: true
#           type: integer
#           format: int64
#         - name: user
#           in: body
#           required: true
#           schema:
#             $ref: '#/definitions/User'
#       responses:
#         200:
#           description: User updated successfully
#           schema:
#             $ref: '#/definitions/User'
#     delete:
#       tags:
#         - User
#       summary: Delete a user by ID
#       parameters:
#         - name: user_id
#           in: path
#           required: true
#           type: integer
#           format: int64
#       responses:
#         204:
#           description: User deleted successfully

# definitions:
#   User:
#     type: object
#     properties:
#       id:
#         type: integer
#         format: int64
#         example: 1
#       username:
#         type: string
#         example: john_doe
#       first_name:
#         type: string
#         example: John
#       last_name:
#         type: string
#         example: Doe
#       email:
#         type: string
#         example: john@example.com
#       section_order:
#         type: array
#         items:
#           type: string
#         example: ['section1', 'section2']
#       password:
#         type: string
#         example: myapp
#       is_verified:
#         type: boolean
#         example: true
#       two_factor_auth:
#         type: boolean
#         example: false
#       provider:
#         type: string
#         example: local
#       profile_pic:
#         type: string
#         example: https://example.com/profile_pic.jpg
#       refresh_token:
#         type: string
#         example: ABCDEFG


# basePath: "/api/shop"
# schemes:
#   - "https"

# paths:
#   /shop:
#     get:
#       tags:
#         - "Shops"
#       summary: "Get a list of shops"
#       responses:
#         200:
#           description: "Successful response"
#           schema:
#             type: "array"
#             items:
#               $ref: "#/definitions/Shop"
#     post:
#       tags:
#         - "Shops"
#       summary: "Create a new shop"
#       parameters:
#         - name: "shop"
#           in: "body"
#           required: true
#           schema:
#             $ref: "#/definitions/Shop"
#       responses:
#         201:
#           description: "Shop created successfully"
#         400:
#           description: "Bad request"

#   /{id}:
#     get:
#       tags:
#         - "Shops"
#       summary: "Get details of a shop by ID"
#       parameters:
#         - name: "id"
#           in: "path"
#           required: true
#           type: "integer"
#       responses:
#         200:
#           description: "Successful response"
#           schema:
#             $ref: "#/definitions/Shop"
#         404:
#           description: "Shop not found"

#     put:
#       tags:
#         - "Shops"
#       summary: "Update a shop by ID"
#       parameters:
#         - name: "id"
#           in: "path"
#           required: true
#           type: "integer"
#         - name: "shop"
#           in: "body"
#           required: true
#           schema:
#             $ref: "#/definitions/Shop"
#       responses:
#         200:
#           description: "Shop updated successfully"
#         404:
#           description: "Shop not found"
#         400:
#           description: "Bad request"

#     delete:
#       tags:
#         - "Shops"
#       summary: "Delete a shop by ID"
#       parameters:
#         - name: "id"
#           in: "path"
#           required: true
#           type: "integer"
#       responses:
#         204:
#           description: "Shop deleted successfully"
#         404:
#           description: "Shop not found"

# definitions:
#   Shop:
#     type: "object"
#     properties:
#       id:
#         type: "integer"
#       merchant_id:
#         type: "string"
#       name:
#         type: "string"
#       policy_confimation:
#         type: "boolean"
#       restricted:
#         type: "string"
#         enum:
#           - "no"
#           - "temporary"
#           - "permanent"
#       admin_status:
#         type: "string"
#         enum:
#           - "pending"
#           - "review"
#           - "approved"
#           - "blacklist"
#       is_deleted:
#         type: "string"
#         enum:
#           - "active"
#           - "temporary"
#       reviewed:
#         type: "boolean"
#       rating:
#         type: "number"
#         format: "double"



#   paths:
#     /:
#       get:
#         tags:
#           - "Products"
#         summary: "Get a list of products"
#         responses:
#           200:
#             description: "Successful response"
#             schema:
#               type: "array"
#               items:
#                 $ref: "#/definitions/Product"
#       post:
#         tags:
#           - "Products"
#         summary: "Create a new product"
#         parameters:
#           - name: "product"
#             in: "body"
#             required: true
#             schema:
#               $ref: "#/definitions/Product"
#         responses:
#           201:
#             description: "Product created successfully"
#           400:
#             description: "Bad request"

#     /{id}:
#       get:
#         tags:
#           - "Products"
#         summary: "Get details of a product by ID"
#         parameters:
#           - name: "id"
#             in: "path"
#             required: true
#             type: "integer"
#         responses:
#           200:
#             description: "Successful response"
#             schema:
#               $ref: "#/definitions/Product"
#           404:
#             description: "Product not found"

#       put:
#         tags:
#           - "Products"
#         summary: "Update a product by ID"
#         parameters:
#           - name: "id"
#             in: "path"
#             required: true
#             type: "integer"
#           - name: "product"
#             in: "body"
#             required: true
#             schema:
#               $ref: "#/definitions/Product"
#         responses:
#           200:
#             description: "Product updated successfully"
#           404:
#             description: "Product not found"
#           400:
#             description: "Bad request"

#       delete:
#         tags:
#           - "Products"
#         summary: "Delete a product by ID"
#         parameters:
#           - name: "id"
#             in: "path"
#             required: true
#             type: "integer"
#         responses:
#           204:
#             description: "Product deleted successfully"
#           404:
#             description: "Product not found"

#   definitions:
#     Product:
#       type: "object"
#       properties:
#         id:
#           type: "integer"
#         shop_id:
#           type: "string"
#         rating_id:
#           type: "string"
#         image_id:
#           type: "string"
#         category_id:
#           type: "string"
#         name:
#           type: "string"
#         description:
#           type: "string"
#         quantity:
#           type: "integer"
#         price:
#           type: "number"
#           format: "double"
#         discount_price:
#           type: "number"
#           format: "double"
#         tax:
#           type: "number"
#           format: "double"
#         admin_status:
#           type: "string"
#           enum:
#             - "pending"
#             - "review"
#             - "approved"
#             - "blacklist"
#         is_deleted:
#           type: "string"
#           enum:
#             - "active"
#             - "temporary"
#         is_published:
#           type: "boolean"
#         currency:
#           type: "string"
#         created_at:
#           type: "string"
#           format: "date-time"
#         updated_at:
#           type: "string"
#           format: "date-time"


